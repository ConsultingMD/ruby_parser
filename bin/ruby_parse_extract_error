#!/usr/bin/ruby -ws

$d ||= false
$d ||= ENV["DELETE"]
$q ||= false
$q ||= ENV["QUIET"]

require 'rubygems'
require 'ruby_parser'

ARGV.push "-" if ARGV.empty?

class Racc::Parser
  def extract_defs
    ss = lexer.src
    src = ss.string
    pre_error = src[0...ss.pos]

    defs = pre_error.grep(/^ *def/)

    raise "can't figure out where the bad code starts" unless defs.last

    last_def_indent = defs.last[/^ */]

    post_error = src[ss.pos..-1]
    idx = post_error =~ /^#{last_def_indent}end.*/

    raise "can't figure out where the bad code ends" unless idx

    src = pre_error + post_error[0..idx+$&.length]

    src.scan(/^(( *)def .*?^\2end)/m)
  end

  def retest_for_errors defs
    warn "# retest: #{defs.size}"

    parser = self.class.new

    parser.process(defs.join("\n\n"))
  rescue SyntaxError, StandardError
    nil
  end
end

ARGV.replace ARGV.map { |path|
  if File.directory? path then
    Dir.glob File.join path, "**/*.rb"
  elsif path =~ /\*\*/ then
    Dir.glob path
  else
    path
  end
}.flatten.reject { |f|
  f =~ /bad_ruby_file/ # I have intentionally bad code in my test dirs
}

ARGV.each do |file|
  ruby = file == "-" ? $stdin.read : File.read(file)

  begin
    $stderr.print "# Validating #{file}: "
    parser = Ruby19Parser.new
    parser.process(ruby, file)
    warn "good"
    File.unlink file if $d
  rescue StandardError, SyntaxError, Racc::ParseError => e
    warn "# error: #{e.message.strip}" unless $q
    warn ""
    next if $q

    begin
      defs = parser.extract_defs

      orig_size = defs.size

      if parser.retest_for_errors defs then
        warn "Can't reproduce error with just methods, punting..."
        next
      end

      mandatory = defs.pop

      catch :extract_done do
        (1..defs.size).each do |perm_size|
          defs.combination(perm_size).each do |trial|
            trial << mandatory
            unless parser.retest_for_errors trial then
              puts trial.join "\n"
              warn "# reduced repro found!"
              throw :extract_done
            end
          end
        end
      end
    rescue RuntimeError, Racc::ParseError => e
      warn "# error: #{e.message.strip}"
    end
  end
end
